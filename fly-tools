#!/usr/bin/env bash
#
# fly-tools ─ modular helper for the “poetrist” Fly app
# --------------------------------------------
# USAGE:
#   ./fly-tools all         # run every step
#   ./fly-tools check-secret
#   ./fly-tools pull-db
#   ./fly-tools restore-db
#   ./fly-tools compress-db
#   ./fly-tools deploy
#   ./fly-tools token
#   ./fly-tools help

set -euo pipefail

# ───── logging ────────────────────────────────────────────────────────────────
# Print “YYYY-MM-DD HH:MM:SS · message”
timestamp() { date '+%Y-%m-%d %H:%M:%S'; }
log()       { printf '%s · %s\n' "$(timestamp)" "$*"; }

# ───── constants ───────────────────────────────────────────────────────────────
APP="poetrist"

LOCAL_DB="poetrist/blog.sqlite3.backup"     # backup copy pulled from Fly
RESTORED_DB="poetrist/blog.sqlite3"
TMP_DB="${LOCAL_DB}.remote"                 # temp file during sftp download

SECRET_FILE="poetrist/.secret_key"

# ───── helpers ────────────────────────────────────────────────────────────────
hash_db() {
  local file="$1"

  # 1) Local file?  → quick, no network hop
  if [[ -f "$file" ]]; then
    sha256sum "$file" | awk '{print $1}'
    return 0
  fi

  # 2) Remote path (inside Fly VM) – ask the VM to hash it.
  fly ssh console -q -a "$APP" -C \
    "sha256sum $file" | awk '{print $1}'
}

# ───── functions ───────────────────────────────────────────────────────────────
usage() { cat <<EOF
fly-tools – modular Fly helper for “${APP}”

Sub-commands:
  check-secret   Ensure .secret_key exists locally
  pull-db        Download blog.sqlite3 from production (only if changed)
  restore-db     Restore local blog.sqlite3 from backup
  compress-db    Optimise & vacuum local database
  deploy         fly deploy (build + release)
  token          Rotate one-time login token & print login URL
  all            Perform every step (check-secret → pull-db → restore-db
                 → compress-db → deploy → token)
  help           Show this message
EOF
}

check_secret() {
  if [[ -f "$SECRET_FILE" ]]; then return 0; fi
  log "➕  Creating missing .secret_key"
  mkdir -p "$(dirname "$SECRET_FILE")"
  openssl rand -hex 32 > "$SECRET_FILE"
}

pull_db() {
  log "⬇️   Checking if remote database changed…"
  remote_db_path() {
    fly ssh console -a "$APP" -C "/app/.venv/bin/python -c 'import pathlib, poetrist.blog, sys; \
    print(pathlib.Path(poetrist.blog.DB_FILE).resolve())'"
  }
  
  local remote_hash local_hash remote_db

  remote_db=$(remote_db_path)
  if [[ -z "$remote_db" ]]; then
    log "❌  Could not determine remote DB path – aborting."
    return 1
  fi

  remote_hash=$(hash_db "$remote_db") || true
  local_hash=$(hash_db "$LOCAL_DB")   || true

  if [[ -z "$remote_hash" ]]; then
    log "⚠️  Could not read remote DB hash – downloading anyway."
  elif [[ "$remote_hash" == "$local_hash" ]]; then
    log "✅  Remote DB identical to local backup – skipping download."
    return 0
  else
    log "🔄  Hashes differ – downloading new copy…"
  fi

  if fly ssh sftp get "$remote_db" "$TMP_DB" -a "$APP" 2>/dev/null; then
    mv -f "$TMP_DB" "$LOCAL_DB"
    log "pulled → $LOCAL_DB"
  else
    log "❌  No remote DB found – continuing"
    rm -f "$TMP_DB" || true
  fi
}

restore_db() {
  # copy poetrist/blog.sqlite3.backup → poetrist/blog.sqlite3
  local target="${LOCAL_DB%.backup}"   # strips the “.backup” suffix
  log "♻️   Restoring database from backup…"
  if [[ -f "$LOCAL_DB" ]]; then
    cp -f "$LOCAL_DB" "$target"
    log "    copied $LOCAL_DB → $target"
  else
    log "    backup not found: $LOCAL_DB"
    return 1
  fi
}

compress_db() {
  if [[ ! -f "$RESTORED_DB" ]]; then
    log "    local DB not found: $RESTORED_DB"
    return 1
  fi

  log "🗜️   Optimising & vacuuming $RESTORED_DB …"
  .venv/bin/python - <<PY
import sqlite3, pathlib, datetime, sys
db_path = pathlib.Path("$RESTORED_DB")
con = sqlite3.connect(db_path)
try:
    con.execute("INSERT INTO entry_fts(entry_fts) VALUES('optimize')")
    con.commit()
    con.isolation_level = None
    con.execute("VACUUM")
finally:
    con.close()
print(f"{datetime.datetime.now():%Y-%m-%d %H:%M:%S} ·     optimisation complete.")
PY
}

deploy_app() {
  log "🚀  fly deploy"
  fly deploy -a "$APP"
}

rotate_token() {
  log "🔑  Rotating one-time login token…"
  local token
  token=$(
    fly ssh console -a "$APP" -C \
      '/app/.venv/bin/flask --app poetrist.blog:app token' |
    grep -Eo '^[A-Za-z0-9._-]{20,}$' | head -n1
  )
  log "One-time token (1 minute) →"
  echo "$token"
}

# ───── dispatcher ──────────────────────────────────────────────────────────────
cmd="${1:-help}"
case "$cmd" in
  check-secret)  check_secret ;;
  pull-db)       pull_db ;;
  restore-db)    restore_db ;;
  compress-db)   compress_db ;;
  deploy)        deploy_app ;;
  token)         rotate_token ;;
  db-only)       pull_db && restore_db && compress_db ;;
  all)           check_secret && pull_db && restore_db && compress_db && deploy_app && rotate_token ;;
  help|-h|--help) usage ;;
  *) log "Unknown sub-command: $cmd"; echo; usage; exit 1 ;;
esac
